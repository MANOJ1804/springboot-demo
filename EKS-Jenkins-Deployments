# Use t2.large Instances.
# serverUrl:  it should be EKS API endpoint ; you need to get credentialsId: 'k8s'
# once EKS is installed using Jenkins; 
#   - aws eks update-kubeconfig --name EKS_CLOUD --region ap-south-1
#   - cd .kube/
#   - cat config (copy the content and save in txt file in local system
# To use EKS Key in Jenkins ; open jenkins ->Manage jenkins ->credentials->Add credential->kind=Secret file ; scope=global ;  file=choose the file ; ID = <any_name> ; Description = <any_name>

pipeline {
    agent any
    tools {
        jdk 'jdk17'
        maven 'maven3'
    }
    environment {
        SCANNER_HOME=tool 'sonar-scanner'
    }

    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/MANOJ1804/springboot-demo.git'
            }
        }
        stage('Compile') {
            steps {
                sh "mvn compile"
            }
        }
        stage('Test') {
            steps {
                sh "mvn test"
            }
        }
        stage('Trivy FS Scan') {
            steps {
                sh "trivy fs --format table -o fs.html . "
            }
        }
        stage('Build') {
            steps {
                sh "mvn package"
            }
        }
         
        stage('Docker build and tag') {
            steps {
                sh "docker build -t manojkumarab/springbootapp:latest ."
            }
        }
        stage('Trivy image Scan') {
            steps {
                sh "trivy image manojkumarab/springbootapp:latest --format table -o image.html"
            }
        }
        stage('Docker Push Image') {
            steps {
                script{
                    // This step should not normally be used in your script. Consult the inline help for details.
                         withDockerRegistry(credentialsId: 'docker_pass', toolName: 'docker')  {
                        sh "docker push manojkumarab/springbootapp:latest"
                        }       
                }
            }
        }
        stage('Deploy to kubernets') {
            steps {
                script{
                    withKubeConfig(caCertificate: '', clusterName: 'EKS_CLOUD', contextName: '', credentialsId: 'k8s', namespace: 'default', restrictKubeConfigAccess: false, serverUrl: 'https://6DD1BB22E07D14A4B427F343FF95122E.gr7.ap-south-1.eks.amazonaws.com') {
                        sh "kubectl apply -f deployment.yaml"
                        sh "kubectl apply -f service.yaml"
                        }
                      
                }
            }
        }
	
    }
}
        
